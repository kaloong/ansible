---
#- name: Create kickstart file
#  template:
#    src: kickstart.cfg.j2
#    dest: "{{ inventory_dir }}/build/{{ inventory_hostname }}.cfg"
#
# Build ISO first then provision VM in VMWare?
# or
# Build VM first then provision ISO?
#
#
- name: Enable gather facts for ansible_os_family
  setup:

- name: Create tmp directory
  #shell: mktemp -d -t centos
  #shell: mkdir -p "/tmp/centos{{ os_version }}"
  file: 
    path: "/tmp/centos{{ os_version }}"
    state: directory
    mode: 0755
  register: tmpdir
  tags:
    - build_bootiso 
#  when: 
#  - cache is defined and cache == "true"

#- name: 
#  stat: 
#    path: "{{ tmpout.stdout }}"
#  register: tmpdir
#  tags:
#    - build_bootiso 

- debug:
    msg: "New directory  {{ tmpdir.path }}"
    #when: tmpout.stat.exists
  tags:
    - build_bootiso 

#- name: Download boot images
#  shell: wget mirror.centos.org/centos/6/os/x86_64/isolinux/boot.msg
#  args:
#    chdir: "{{ tmpdir.stat.path }}"
#    executable: /bin/bash

#- name: Download 
#  get_url: 
#    url: http://mirror.centos.org/centos/6/os/x86_64/isolinux/{{ item }}
#    dest: "{{ tmpdir.stat.path }}/"
#  with_items:
#    - "isolinux.cfg"
#    - "boot.msg"
#    - "splash.jpg"  
- name: Create local build_bootiso directory in tmp
  file:
    path: "{{ bootiso_local_dir }}"
    state: directory
    mode: 0755
  tags:
    - build_bootiso 

- name: Create isolinux directory in tmp
  file:
    path: "{{ tmpdir.path }}/isolinux"
    state: directory
    mode: 0755
  register: isolinux_target_dir  
  tags:
    - build_bootiso 

- name: Doh 
  debug:
    #msg: "... {{ iso_urls['%s'|format( os_version )] }} ..."
    msg: "... {{ iso_urls[ os_version ] }} ..."
    #msg: "... {{ os_version.split('.')[0] }} ..."
    #msg: "{{ isolinux_boot_files[ os_version.split()[0] ] }}"
  when: os_version is defined and iso_urls[ os_version ] is defined

- name: Download isolinux {{ os_version }} boot files 
  get_url: 
    url: "{{ iso_urls[ os_version ] }}/isolinux/{{ item }}"
    dest: "{{ isolinux_target_dir.path }}"
    force: false
  with_items: "{{ isolinux_boot_files[ os_version.split('.')[0] ] }}"
  when: 
    - os_version is defined 
      #    - os_version is search("^6.*")
      #- iso_urls[ "{{ os_version }}" ] is defined
    - iso_urls[ os_version ] is defined
  tags:
    - build_bootiso 

#- name: Download isolinux {{ os_version }} boot files 
#  get_url: 
#    url: "{{ iso_urls[ os_version ] }}/isolinux/{{ item }}"
#    dest: "{{ isolinux_target_dir.path }}"
#  with_items: "{{ isolinux_boot_files_6 }}"
#  when: 
#    - os_version is defined 
#    - os_version is search("^6.*")
#    - iso_urls[ os_version ] is defined
#  tags:
#    - build_bootiso 
#
#- name: Download isolinux {{ os_version }} boot files 
#  get_url: 
#    url: "{{ iso_urls[ os_version ] }}/isolinux/{{ item }}"
#    dest: "{{ isolinux_target_dir.path }}"
#  with_items: "{{ isolinux_boot_files_7 }}"
#    - os_version is defined 
#    - os_version is search("^7.*")
#    - iso_urls[ os_version ] is defined
#  tags:
#    - build_bootiso 

- name: Generate kickstart {{ os_version }} file
  template:
    src: "{{ isolinux_ks[ os_version.split('.')[0] ] }}"
    dest: "{{ isolinux_target_dir.path }}/{{ inventory_hostname }}.ks"
  tags:
    - build_bootiso 

- name: Generate isolinux {{ os_version }} config file
  template:
    src: "{{ isolinux_cfg[ os_version.split('.')[0] ] }}"
    dest: "{{ isolinux_target_dir.path }}/isolinux.cfg"
  tags:
    - build_bootiso 

- name: Generate boot ISO in ClearLinux
  shell: xorrisofs -V "OEMDRV" -o "{{ bootiso_local_dir }}/{{ bootiso_filename }}" -b isolinux/isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -J -r  "{{ tmpdir.path }}"
  register: build_out
  when: 
    - ansible_os_family == "ClearLinux"
    - os_version is defined and iso_urls[ os_version ] is defined
  tags:
    - build_bootiso 

- name: Generate boot ISO in OSX
  shell: mkisofs -T -R -V "OEMDRV" -o "{{ bootiso_local_dir }}/{{ bootiso_filename }}" -b isolinux/isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -J "{{ tmpdir.path }}"
  register: build_out
  when: 
    - ansible_os_family == "Darwin"
    - os_version is defined and iso_urls[ os_version ] is defined
  tags:
    - build_bootiso 

- debug:
    msg: "{{ build_out }}"
  tags:
    - build_bootiso 

#- name: Remove tmp directory
#  file:
#    state: absent
#    path: "{{ tmpdir.stat.path }}" 
#  when: tmpdir.stat.exists
#  tags:
#    - build_bootiso 
